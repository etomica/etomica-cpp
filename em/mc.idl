/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

interface Potential {
  void setCutoff(double rc);
  double getCutoff();
  void setTruncationType(long tt);
  long getTruncationType();
};

interface PotentialLJ : Potential {
  void PotentialLJ(double epsilon, double sigma, long tt, double rc);
};

PotentialLJ implements Potential;

interface PotentialSS : Potential {
  void PotentialSS(double epsilon, long p, long tt, double rc);
};

PotentialSS implements Potential;

interface PotentialWCA : PotentialLJ {
  void PotentialWCA(double epsilon, double sigma);
};

PotentialWCA implements PotentialLJ;

interface PotentialHS : Potential {
  void PotentialHS(double sigma);
};

PotentialHS implements Potential;

interface PotentialSQW : Potential {
  void PotentialSQW(double sigma, double lambda, double epsilon);
};

PotentialSQW implements Potential;

interface PotentialEwald : Potential {
  void PotentialEwald([Ref] Potential p2, double alpha, double qiqj, double rc);
};

interface PotentialChargeBare : Potential {
  void PotentialChargeBare(double qiqj, double core, double rc);
};

PotentialChargeBare implements Potential;

interface PotentialCharge : Potential {
  void PotentialCharge([Ref] Potential p2, double qiqj, double rc);
};

PotentialCharge implements Potential;

[JSImplementation="Potential"]
interface PotentialJS {
  void PotentialJS();
  double u(double r2);
  double du(double r2);
  double d2u(double r2);
};

interface PotentialMolecular {};

interface PotentialMolecularAtomic : PotentialMolecular {
  void PotentialMolecularAtomic(long nAtoms, [Ref] Potential pAtomic);
};

PotentialMolecularAtomic implements PotentialMolecular;

interface EmbedF {};

interface EmbedFsqrt : EmbedF {
  void EmbedFsqrt(double Ceps);
};

EmbedFsqrt implements EmbedF;

interface AtomInfo {};

interface SpeciesList {
  void SpeciesList();
  long size();
  void add(Species species);
  Species get(long iSpecies);
  [Ref] AtomInfo getAtomInfo();
};

interface Species {
  long getNumAtoms();
  VoidPtr getAtomTypes();
};

interface SpeciesSimple : Species {
  void SpeciesSimple(long numAtoms, double mass);
  void addAtomType(double mass, long atomsOfType);
  void setAtomPosition(long iAtom, double x, double y, double z);
};

SpeciesSimple implements Species;

interface Box {
  void Box([Ref] SpeciesList speciesList);
  long getNumAtoms();
  long getNumMolecules(long iSpecies);
  long getTotalNumMolecules();
  void setNumMolecules(long iSpecies, long numMolecules);
  [Const] VoidPtr getBoxSize();
  void setBoxSize(double x, double y, double z);
  void initCoordinates();
  VoidPtr getAtomPosition(long iAtom);
  void enableVelocities();
  VoidPtr getAtomVelocity(long iAtom);
  void setPeriodic(boolean x, boolean y, boolean z);
};

interface PotentialMaster {
  void PotentialMaster([Ref] SpeciesList sl, [Ref] Box box, boolean doEmbed);
  void setPairPotential(long iType, long jType, Potential pij);
  void setDoTruncationCorrection(boolean doCorrection);
  void setDoSingleTruncationCorrection(boolean doCorrection);
  void setRhoPotential(long jType, Potential rhoj);
  void setEmbedF(long iType, EmbedF Fi);
  void init();
  [Ref] Box getBox();
};

interface PotentialMasterCell : PotentialMaster {
  void PotentialMasterCell([Ref] SpeciesList sl, [Ref] Box box, boolean doEmbed, long cellRange);
};

PotentialMasterCell implements PotentialMaster;

interface PotentialMasterList : PotentialMasterCell {
  void PotentialMasterList([Ref] SpeciesList sl, [Ref] Box box, boolean doEmbed, long cellRange, double nbrRange);
};

PotentialMasterList implements PotentialMasterCell;

interface PotentialMasterVirial : PotentialMaster {
  void PotentialMasterVirial([Ref] SpeciesList sl, [Ref] Box box);
};

PotentialMasterVirial implements PotentialMaster;

interface PotentialMasterVirialMolecular : PotentialMasterVirial {
  void PotentialMasterVirialMolecular([Ref] SpeciesList sl, [Ref] Box box);
  void setMoleculePairPotential(long iSpecies, long jSpecies, PotentialMolecular p);
};

interface Random {
  void Random();
  void Random(long seed);
  long getSeed();
};

interface MCMove {
  double getAcceptance();
  attribute double stepSize;
  attribute boolean tunable;
  attribute boolean verboseAdjust;
};

interface MCMoveDisplacement : MCMove {
  void MCMoveDisplacement([Ref] Box box, [Ref] PotentialMaster potentialMaster, [Ref] Random random, double stepSize);
};

MCMoveDisplacement implements MCMove;

interface MCMoveVolume : MCMove {
  void MCMoveVolume([Ref] Box box, [Ref] PotentialMaster potentialMaster, [Ref] Random random, double pressure, double stepSize, [Ref] SpeciesList speciesList, [Ref] Meter oldMeterPE);
};

MCMoveVolume implements MCMove;

interface MCMoveInsertDelete : MCMove {
  void MCMoveInsertDelete([Ref] Box box, [Ref] PotentialMaster potentialMaster, [Ref] Random random, double mu, long iSpecies);
};

MCMoveInsertDelete implements MCMove;

interface MCMoveDisplacementVirial : MCMove {
  void MCMoveDisplacementVirial([Ref] Box box, [Ref] PotentialMaster potentialMaster, [Ref] Random random, double stepSize, [Ref] Cluster cluster);
};

MCMoveDisplacementVirial implements MCMove;

interface MCMoveChainVirial : MCMove {
  void MCMoveChainVirial([Ref]SpeciesList speciesList, [Ref] Box box, [Ref] PotentialMaster potentialMaster, [Ref] Random random, double sigma);
};

MCMoveChainVirial implements MCMove;

interface MCMoveMoleculeDisplacementVirial : MCMove {
  void MCMoveMoleculeDisplacementVirial([Ref]SpeciesList speciesList, long iSpecies, [Ref] Box box, [Ref] PotentialMaster potentialMaster, [Ref] Random random, double stepSize, [Ref] Cluster cluster);
  VoidPtr getHistogram();
  VoidPtr getHistogramPi();
};

MCMoveMoleculeDisplacementVirial implements MCMove;

interface MCMoveMoleculeRotateVirial : MCMove {
  void MCMoveMoleculeRotateVirial([Ref]SpeciesList speciesList, long iSpecies, [Ref] Box box, [Ref] PotentialMaster potentialMaster, [Ref] Random random, double stepSize, [Ref] Cluster cluster);
};

MCMoveMoleculeRotateVirial implements MCMove;

interface IntegratorListener { };

interface DataSink { };

interface Average : DataSink {
  void Average(long nData, long blockSize, long maxBlockCount, boolean doCovariance);
  void setNumData(long newNumData);
  long getNumData();
  long getBlockSize();
  long getBlockCount();
  VoidPtr getStatistics();
  VoidPtr getBlockCovariance();
  void reset();
};

Average implements DataSink;

interface AverageRatio : Average {
  VoidPtr getRatioStatistics();
};

AverageRatio implements Average;

interface History : DataSink {
  void History(long nData, long historyType, long historySize, Meter xMeter);
  void setHistoryType(long historyType);
  VoidPtr getHistory();
  long getHistorySize();
  void reset();
};

History implements DataSink;

interface Meter {
  long getNumData();
  VoidPtr getData();
};

interface PotentialCallback { };

interface PotentialCallbackPressure : PotentialCallback {
  void PotentialCallbackPressure([Ref] Box box, double temperature, boolean takesForces);
};

PotentialCallbackPressure implements PotentialCallback;

interface PotentialCallbackHMA : PotentialCallback {
  void PotentialCallbackHMA([Ref] Box box, double temperature, double Pharm, boolean doD2);
  void setReturnAnharmonic(boolean returnAnharmonic, PotentialMaster potentialMaster);
};

PotentialCallbackHMA implements PotentialCallback;

interface MeterPotentialEnergy : Meter {
  void MeterPotentialEnergy([Ref] Integrator integrator);
};

MeterPotentialEnergy implements Meter;

interface MeterKineticEnergy : Meter {
  void MeterKineticEnergy();
  void setIntegrator(IntegratorMD integrator);
};

MeterKineticEnergy implements Meter;

interface MeterFullCompute : Meter {
  void MeterFullCompute([Ref] PotentialMaster potentialMaster);
  void addCallback(PotentialCallback pcb);
  void setDoCompute(boolean doCompute);
};

MeterFullCompute implements Meter;

interface MeterNumAtoms : Meter {
  void MeterNumAtoms([Ref] Box box);
};

MeterNumAtoms implements Meter;

interface MeterDensity : Meter {
  void MeterDensity([Ref] Box box);
};

MeterDensity implements Meter;

interface MeterWidomInsertion : Meter {
  void MeterWidomInsertion([Ref] Box box, long is, [Ref] PotentialMaster pm, [Ref] Random r, double t, long numTrials);
};

MeterWidomInsertion implements Meter;

interface MeterSteps : Meter {
  void MeterSteps([Ref] Integrator integrator);
};

MeterSteps implements Meter;

interface MeterTime : Meter {
  void MeterTime([Ref] IntegratorMD integrator);
};

MeterTime implements Meter;

interface MeterRDF : Meter {
  void MeterRDF([Ref] Box box, double rMax, long nBins);
  void reset();
  VoidPtr getRData();
  void setRMax(double rMax);
  void setNBins(double nBins);
};

MeterRDF implements Meter;

interface DataPump : IntegratorListener {
  void DataPump([Ref] Meter meter, long interval);
  void DataPump([Ref] Meter meter, long interval, DataSink sink);
  DataSink getDataSink(long i);
  void addDataSink(DataSink dataSink);
};

DataPump implements IntegratorListener;

interface Integrator {
  void doStep();
  void doSteps(long steps);
  void setTemperature(double temperature);
  double getTemperature();
  void reset();
  double getPotentialEnergy();
  void addListener(IntegratorListener listener);
  void removeListener(IntegratorListener listener);
  long getStepCount();
};

interface IntegratorMC : Integrator {
  void IntegratorMC([Ref] PotentialMaster potentialMaster, [Ref] Random random);
  void addMove(MCMove move, double moveProb);
  void removeMove(MCMove move);
  void setTuning(boolean doTuning);
};

IntegratorMC implements Integrator;

interface IntegratorMD : Integrator {
  void setTimeStep(double tStep);
  void setNbrCheckInterval(long interval);
  void addPotentialCallback(PotentialCallback pc, long interval);
};

IntegratorMD implements Integrator;

interface IntegratorMDVelocityVerlet : IntegratorMD {
  void IntegratorMDVelocityVerlet([Ref] AtomInfo atomInfo, [Ref] PotentialMaster potentialMaster, [Ref] Random random, [Ref] Box box);
};

IntegratorMDVelocityVerlet implements IntegratorMD;

interface Cluster { };

interface ClusterVirial : Cluster {
  void ClusterVirial([Ref] PotentialMasterVirial potentialMaster, double temperature, long nDer, boolean cached);
};

ClusterVirial implements Cluster;

interface ClusterChain : Cluster {
  void ClusterChain([Ref] PotentialMasterVirial potentialMaster, double tempreature, double chainFac, double ringFac, boolean cached);
};

ClusterChain implements Cluster;

interface ClusterFlipped : Cluster {
  void ClusterFlipped([Ref] Cluster cluster, [Ref] SpeciesList speciesList, [Ref] Box box, boolean cached);
};

ClusterFlipped implements Cluster;

interface VirialAlpha {
  void VirialAlpha([Ref] IntegratorMC refIntegrator, [Ref] IntegratorMC targetIntegrator,
                   [Ref] Cluster refClusterRef, [Ref] Cluster refClusterTarget,
                   [Ref] Cluster targetClusterRef, [Ref] Cluster targetClusterTarget);
  void setVerbose(boolean newVerbose);
  void runSteps(long steps);
  VoidPtr getAlphaStatistics();
  boolean getAllDone();
  long getNumSavedStats();
  VoidPtr getSavedStats(long i);
  [Ref] Average getTargetAverage();
  [Ref] Average getRefAverage();
};

interface VirialProduction {
  void VirialProduction([Ref] IntegratorMC refIntegrator, [Ref] IntegratorMC targetIntegrator,
                   [Ref] Cluster refClusterRef, [Ref] Cluster refClusterTarget,
                   [Ref] Cluster targetClusterRef, [Ref] Cluster targetClusterTarget,
                   double alpha, double refIntegral);
  void runSteps(long numSteps);
  VoidPtr getFullStats();
  VoidPtr getAlphaStats();
  VoidPtr getRefStats();
  VoidPtr getTargetStats();
  VoidPtr getRefBCStats();
  VoidPtr getTargetBCStats();
  VoidPtr getRefRatioStats();
  VoidPtr getTargetRatioStats();
  VoidPtr getFullBCStats();
  long getRefSteps();
  long getTargetSteps();
  [Ref] AverageRatio getTargetAverage();
  [Ref] AverageRatio getRefAverage();
};
  

interface ArrayUtil {
  void ArrayUtil(VoidPtr p);
  double x(long i);
  double x2d(long i, long j);
};
